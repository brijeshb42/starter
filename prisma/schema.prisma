// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  name         String
  email        String   @unique
  googleUserId String?  @unique @map("google_user_id")
  githubUserId String?  @unique @map("github_user_id")
  avatar       String?
  blogs        Blog[]   @relation("user_blogs")
  likes        Like[]   @relation("user_likes")
  defaultBlog  Blog?    @relation("user_default_blog")

  @@map("users")
}

model Blog {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  user             User     @relation("user_blogs", fields: [userId], references: [id])
  userId           Int      @map("user_id")
  defaultForUser   User?    @relation("user_default_blog", fields: [defaultForUserId], references: [id])
  defaultForUserId Int?     @map("default_for_user_id")
  name             String
  slug             String   @unique
  introduction     String
  posts            Post[]   @relation("blog_posts")
  tags             Tag[]    @relation("blog_tags")

  @@map("blogs")
}

model Post {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  title      String
  content    String
  slug       String
  draft      Boolean?
  blog       Blog     @relation("blog_posts", fields: [blogId], references: [id])
  blogId     Int      @map("blog_id")
  likes      Like[]   @relation("post_likes")
  likesCount Int      @default(0) @map("likes_count")
  cover      String?
  coverAlt   String?  @map("cover_alt")
  tags       Tag[]    @relation("post_tags")

  @@map("posts")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation("post_likes", fields: [postId], references: [id])
  user      User     @relation("user_likes", fields: [userId], references: [id])
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")

  @@map("likes")
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  name      String
  slug      String
  blog      Blog     @relation("blog_tags", fields: [blogId], references: [id])
  blogId    Int      @map("blog_id")
  posts     Post[]   @relation("post_tags")

  @@map("tags")
}
